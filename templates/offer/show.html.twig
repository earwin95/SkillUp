{% extends 'base.html.twig' %}
{% block title %}{{ offer.title }}{% endblock %}

{% block body %}
<style>
.chat-wrap{ max-width: 820px; margin: 0 auto; padding: 12px 0 4px; }
.chat-head{ display:flex; align-items:center; justify-content:space-between; gap:12px; margin-bottom:12px; }
.chat-title{ font-size: 28px; font-weight: 800; letter-spacing:.2px; margin:0; }
.return-link{ color:#2563eb; font-weight:700; text-decoration:none; white-space:nowrap; }
.return-link:hover{ text-decoration:underline; }

.chat-card{ border:1px solid var(--panel-border); background:var(--panel); border-radius:18px; overflow:hidden; box-shadow:0 12px 30px rgba(15,23,42,.12); }
html[data-theme="dark"] .chat-card{ background:linear-gradient(180deg, rgba(15,23,42,.82), rgba(15,23,42,.68)); }

.chat-feed{ height: 62vh; min-height: 360px; max-height: 68vh; overflow-y: auto; padding:16px; background: radial-gradient(1200px 520px at 80% 120%, rgba(99,102,241,.06), transparent), linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.04)); }
html[data-theme="dark"] .chat-feed{ background: radial-gradient(1200px 520px at 80% 120%, rgba(99,102,241,.14), transparent), linear-gradient(180deg, rgba(255,255,255,.04), rgba(255,255,255,.02)); }

.msg-row{ display:flex; margin:8px 0; }
.msg-me{ justify-content: flex-end; }
.msg-other{ justify-content: flex-start; }
.msg-col{ max-width: 78%; display:flex; flex-direction:column; }

.bubble{ padding:10px 12px; border-radius:16px; line-height:1.45; font-size:14px; word-wrap: break-word; box-shadow:0 4px 12px rgba(15,23,42,.10); }
.bubble-me{ background:linear-gradient(90deg, var(--primary), var(--primary-2)); color:#fff; border: none; }
.bubble-other{ background: rgba(127,127,127,.10); border:1px solid var(--panel-border); color: var(--ink); }
.bubble-deleted{ font-style:italic; opacity:.7; }

.meta{ font-size:11px; opacity:.65; margin-top:4px; }

/* actions (édition/suppression) */
.action-bar{ display:flex; gap:6px; margin-top:6px; }
.btn-small{ border:1px solid var(--panel-border); background:rgba(127,127,127,.08); border-radius:10px; padding:4px 8px; font-size:12px; cursor:pointer; }
.btn-small:hover{ background:rgba(127,127,127,.12); }
.btn-edit{ }
.btn-delete{ color:#b91c1c; border-color:rgba(239,68,68,.35); }
@media(max-width:720px){ .btn-edit{ display:none; } } /* cacher édition sur petit écran */

/* composer */
.composer{ border-top:1px solid var(--panel-border); background:rgba(255,255,255,.5); padding:10px; }
html[data-theme="dark"] .composer{ background:rgba(15,23,42,.35); }
.compose-row{ display:flex; gap:10px; align-items:flex-end; }
.input{ flex:1; resize:none; max-height:140px; min-height:44px; border-radius:12px; padding:10px 12px; outline:none; border:1px solid var(--panel-border); background:rgba(127,127,127,.08); color:var(--ink); }
.input:focus{ border-color: rgba(99,102,241,.6); box-shadow:0 0 0 3px rgba(99,102,241,.15); }
.btn-send{ border:none; border-radius:12px; padding:10px 14px; font-weight:800; cursor:pointer; color:#fff; background:linear-gradient(90deg, var(--primary), var(--primary-2)); box-shadow:0 8px 18px rgba(37,99,235,.28); }
.btn-send:hover{ filter:brightness(1.05); }
.btn-send:disabled{ opacity:.6; cursor:not-allowed; filter:none; }

/* date divider */
.date-divider{ text-align:center; margin:12px 0; }
.date-divider span{ display:inline-block; font-size:11px; padding:4px 8px; border-radius:12px; background: rgba(127,127,127,.12); border:1px solid var(--panel-border); }

/* inline edit */
.edit-area{ width:100%; border:1px solid var(--panel-border); background:rgba(127,127,127,.08); border-radius:10px; padding:8px 10px; resize:vertical; min-height:44px; }

/* Skeleton */
.skel{ height:14px; background:rgba(127,127,127,.15); border-radius:8px; }
</style>

<div class="chat-wrap">
  <div class="chat-head">
    <h1 class="chat-title">{{ offer.title }}</h1>
    <a href="{{ path('offer_index') }}" class="return-link">← Retour aux offres</a>
  </div>

  <div class="chat-card">
    {% if not app.user %}
      <div class="chat-feed" style="display:grid; place-items:center;">
        <div style="text-align:center;">
          <div class="skel" style="width:180px; margin:0 auto 10px;"></div>
          <a href="{{ path('app_login') }}" class="btn-send" style="display:inline-block;">Se connecter</a>
        </div>
      </div>

    {% elseif app.user and app.user == offer.owner %}
      <div class="chat-feed" style="display:grid; place-items:center;">
        <div class="skel" style="width:220px; margin:0 auto;"></div>
      </div>

    {% elseif conversation is defined and conversation %}
      <div id="messages" class="chat-feed">
        <div id="skeleton">
          <div class="skel" style="width:120px; margin:6px 0;"></div>
          <div class="skel" style="width:68%; margin:8px 0;"></div>
          <div class="skel" style="width:46%; margin:8px 0 8px auto;"></div>
        </div>
      </div>

      <form id="chat-form" class="composer">
        <div class="compose-row">
          <textarea id="chat-input" class="input" rows="1" placeholder="Écrire un message… (Entrée pour envoyer, Shift+Entrée pour une ligne)"></textarea>
          <button id="chat-send" type="submit" class="btn-send">Envoyer</button>
        </div>
      </form>

      <script>
      (function () {
        if (window.__offerChatInit) return; window.__offerChatInit = true;

        const messagesEl = document.getElementById('messages');
        const skeleton   = document.getElementById('skeleton');
        const form       = document.getElementById('chat-form');
        const input      = document.getElementById('chat-input');
        const btn        = document.getElementById('chat-send');
        const tokenSend  = {{ csrf_token('send_message_' ~ conversation.id)|json_encode|raw }};
        const tokenEdit  = {{ csrf_token('edit_message_' ~ conversation.id)|json_encode|raw }};
        const tokenDel   = {{ csrf_token('delete_message_' ~ conversation.id)|json_encode|raw }};

        let lastId       = 0;
        let lastDateKey  = null;
        let isFetching   = false;
        const renderedIds = new Set();

        function autoResize(){ input.style.height='auto'; input.style.height=Math.min(input.scrollHeight,140)+'px'; }
        input.addEventListener('input', autoResize);
        input.addEventListener('keydown', (e)=>{
          if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); form.dispatchEvent(new Event('submit')); }
        });
        setTimeout(()=>{ input?.focus(); autoResize(); }, 50);

        function dateKey(iso){ const d=new Date(iso); return d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate(); }
        function renderDivider(iso){
          const wrap=document.createElement('div'); wrap.className='date-divider';
          const span=document.createElement('span'); span.textContent=new Date(iso).toLocaleDateString();
          wrap.appendChild(span); messagesEl.appendChild(wrap);
        }

        function renderActions(container, msg, bubble, contentSpan){
          if (!msg.canEdit && !msg.canDelete) return;

          const bar = document.createElement('div');
          bar.className='action-bar';

          if (msg.canEdit) {
            const edit = document.createElement('button');
            edit.type='button'; edit.className='btn-small btn-edit'; edit.textContent='Éditer';
            edit.addEventListener('click', ()=>enterEditMode(msg, bubble, contentSpan, bar));
            bar.appendChild(edit);
          }
          if (msg.canDelete) {
            const del = document.createElement('button');
            del.type='button'; del.className='btn-small btn-delete'; del.textContent='Supprimer';
            del.addEventListener('click', async ()=>{
              if (!confirm('Supprimer ce message ?')) return;
              const res = await fetch(`{{ path('conversation_delete', {id: conversation.id}) }}`, {
                method:'POST', headers:{'Content-Type':'application/json'},
                body: JSON.stringify({ messageId: msg.id, _token: tokenDel })
              });
              if (res.ok) {
                contentSpan.textContent = 'Message supprimé';
                bubble.classList.add('bubble-deleted');
                bar.remove();
              } else {
                try{ const j=await res.json(); alert(j.error||'Erreur'); }catch(e){}
              }
            });
            bar.appendChild(del);
          }

          // retire les actions après l’échéance
          const until = new Date(msg.editableUntil).getTime();
          const now = Date.now();
          if (until > now) {
            setTimeout(()=>{ try{ bar.remove(); }catch(e){} }, until - now + 1000);
          }

          container.appendChild(bar);
        }

        function renderMessage(msg){
          if (renderedIds.has(msg.id)) return;
          renderedIds.add(msg.id);

          const key=dateKey(msg.createdAt);
          if(key!==lastDateKey){ lastDateKey=key; renderDivider(msg.createdAt); }

          const row=document.createElement('div'); row.className='msg-row ' + (msg.mine?'msg-me':'msg-other');
          const col=document.createElement('div'); col.className='msg-col';

          const bubble=document.createElement('div'); bubble.className='bubble ' + (msg.mine?'bubble-me':'bubble-other');
          if (msg.deleted) bubble.classList.add('bubble-deleted');

          const contentSpan=document.createElement('span'); contentSpan.textContent=msg.content;
          bubble.appendChild(contentSpan);

          const meta=document.createElement('div'); meta.className='meta';
          meta.textContent = (msg.mine?'Moi':msg.authorName) + ' · ' + new Date(msg.createdAt).toLocaleString() + (msg.edited?' · modifié':'');

          col.appendChild(bubble);
          col.appendChild(meta);
          renderActions(col, msg, bubble, contentSpan);

          row.appendChild(col);
          messagesEl.appendChild(row);
          messagesEl.scrollTop = messagesEl.scrollHeight;
        }

        function enterEditMode(msg, bubble, contentSpan, bar){
          const orig = contentSpan.textContent;
          const box = document.createElement('textarea');
          box.className='edit-area';
          box.value = orig;

          const actions = document.createElement('div');
          actions.style.marginTop = '6px';
          const save = document.createElement('button');
          save.type='button'; save.className='btn-small'; save.textContent='Enregistrer';
          const cancel = document.createElement('button');
          cancel.type='button'; cancel.className='btn-small'; cancel.style.marginLeft='6px'; cancel.textContent='Annuler';

          bubble.innerHTML='';
          bubble.appendChild(box);
          bar.style.display='none';

          save.addEventListener('click', async ()=>{
            const text = (box.value||'').trim();
            if(!text) return;
            const res = await fetch(`{{ path('conversation_edit', {id: conversation.id}) }}`, {
              method:'POST', headers:{'Content-Type':'application/json'},
              body: JSON.stringify({ messageId: msg.id, content: text, _token: tokenEdit })
            });
            if(res.ok){
              contentSpan.textContent = text;
              bubble.innerHTML=''; bubble.appendChild(contentSpan);
              bar.remove(); // une fois modifié, plus d’édition
            }else{
              try{ const j=await res.json(); alert(j.error||'Erreur'); }catch(e){}
            }
          });
          cancel.addEventListener('click', ()=>{
            bubble.innerHTML=''; bubble.appendChild(contentSpan);
            bar.style.display='';
          });

          const col = bubble.parentElement;
          col.appendChild(actions);
          actions.appendChild(save);
          actions.appendChild(cancel);
        }

        async function fetchNew(){
          if (isFetching) return;
          isFetching = true;
          try{
            const res = await fetch(`{{ path('conversation_messages', {id: conversation.id}) }}?after=${lastId}`);
            if (!res.ok) return;
            const data = await res.json();
            skeleton && skeleton.remove();
            let gotOther = false;
            (data.messages||[]).forEach(m=>{
              renderMessage(m);
              if(!m.mine) gotOther=true;
              lastId = Math.max(lastId, m.id);
            });
            if (gotOther) {
              fetch(`{{ path('conversation_seen', {id: conversation.id}) }}`, { method:'POST' });
            }
          } finally {
            isFetching = false;
          }
        }

        async function sendMessage(text){
          btn.disabled = true;
          try{
            const res = await fetch(`{{ path('conversation_send', {id: conversation.id}) }}`, {
              method:'POST', headers:{'Content-Type':'application/json'},
              body: JSON.stringify({ content:text, _token: tokenSend })
            });
            if(res.ok){
              const data = await res.json();
              if(data.message){
                lastId = Math.max(lastId, data.message.id);
                renderMessage(data.message);
              }
            }
          } finally { btn.disabled = false; }
        }

        form.addEventListener('submit', async (e)=>{
          e.preventDefault();
          const text=(input.value||'').trim();
          if(!text) return;
          input.value=''; autoResize();
          await sendMessage(text);
        });

        // init
        fetchNew();
        setInterval(fetchNew, 3000);
        fetch(`{{ path('conversation_seen', {id: conversation.id}) }}`, { method:'POST' });
      })();
      </script>

    {% else %}
      <div class="chat-feed" style="display:grid; place-items:center;">
        <div class="skel" style="width:160px;"></div>
      </div>
    {% endif %}
  </div>
</div>
{% endblock %}
