{% extends 'base.html.twig' %}
{% block title %}Mes messages{% endblock %}

{% block body %}
<style>
.inbox-wrap{max-width:960px;margin:0 auto;padding:12px 0 4px;}
.inbox-head{display:flex;align-items:center;justify-content:space-between;gap:12px;margin-bottom:12px;}
.inbox-title{font-size:28px;font-weight:800;letter-spacing:.2px;margin:0;}
.inbox-search{flex:1;max-width:340px;border:1px solid var(--panel-border);background:rgba(127,127,127,.08);border-radius:12px;padding:10px 12px;outline:none;color:var(--ink);}
.inbox-search:focus{border-color:rgba(99,102,241,.6);box-shadow:0 0 0 3px rgba(99,102,241,.15);}

.conv-list{list-style:none;margin:0;padding:0;display:grid;gap:12px;}
.conv{border:1px solid var(--panel-border);background:var(--panel);border-radius:14px;box-shadow:0 10px 22px rgba(15,23,42,.08);transition:transform .06s, box-shadow .15s, border-color .15s;}
.conv:hover{transform:translateY(-1px);border-color:rgba(99,102,241,.35);box-shadow:0 16px 32px rgba(15,23,42,.10);}
.conv-link{display:flex;gap:12px;padding:12px;align-items:center;text-decoration:none;color:inherit;}

.avatar{width:40px;height:40px;border-radius:999px;display:grid;place-items:center;font-weight:800;letter-spacing:.2px;
  background:linear-gradient(90deg,var(--primary),var(--primary-2));color:#fff;flex:0 0 40px;}
.meta{min-width:0;flex:1;}

.top{display:flex;gap:10px;align-items:baseline;justify-content:space-between;}
.name{font-weight:800;}
.time{font-size:12px;color:var(--muted);white-space:nowrap;}
.offer{font-size:13px;color:var(--muted);margin-top:2px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}
.last{margin-top:6px;font-size:14px;line-height:1.45;color:var(--ink);opacity:.9;display:-webkit-box;-webkit-line-clamp:2;-webkit-box-orient:vertical;overflow:hidden;}
.last em{color:var(--muted);}

.empty{margin:14px 0;color:var(--muted);text-align:center;}
</style>

<div class="inbox-wrap">
  <div class="inbox-head">
    <h1 class="inbox-title">Mes messages</h1>
    <input id="inbox-search" class="inbox-search" type="search" placeholder="Rechercher une personne ou une offre…">
  </div>

  {% if conversations is not empty %}
    <ul id="conv-list" class="conv-list">
      {% for c in conversations %}
        {% set other = (me and c.owner and c.participant) and (me.id == c.owner.id) ? c.participant : c.owner %}
        {% set otherName = attribute(other,'username') is defined and other.username ? other.username : other.email %}
        {% set initial = otherName|slice(0,1)|upper %}
        {% set last = c.messages|last %}
        <li class="conv" data-search="{{ (otherName ~ ' ' ~ (c.offer.title ?? ''))|lower }}">
          <a class="conv-link" href="{{ path('offer_show', {'id': c.offer.id}) }}">
            <div class="avatar">{{ initial }}</div>
            <div class="meta">
              <div class="top">
                <span class="name">{{ otherName }}</span>
                {% if c.updatedAt is defined and c.updatedAt %}
                  <time class="time" datetime="{{ c.updatedAt|date('c') }}">{{ c.updatedAt|date('d/m H:i') }}</time>
                {% endif %}
              </div>
              <div class="offer">À propos de : {{ c.offer.title }}</div>
              <div class="last">
                {% if last %}
                  {% if last.deletedAt is defined and last.deletedAt %}
                    <em>Message supprimé</em>
                  {% else %}
                    {{ last.content|u.truncate(120, '…') }}
                  {% endif %}
                {% else %}
                  <em>Pas encore de messages</em>
                {% endif %}
              </div>
            </div>
          </a>
        </li>
      {% endfor %}
    </ul>
  {% else %}
    <p class="empty">Aucune conversation pour le moment.</p>
  {% endif %}
</div>

<script>
// Filtre client-side
(function(){
  const input = document.getElementById('inbox-search');
  const list = document.getElementById('conv-list');
  if(!input || !list) return;
  input.addEventListener('input', ()=>{
    const q = input.value.trim().toLowerCase();
    for (const li of list.children) {
      const hay = li.getAttribute('data-search') || '';
      li.style.display = hay.includes(q) ? '' : 'none';
    }
  });

  // Affichage de l'heure en relatif (fr)
  const times = document.querySelectorAll('time[datetime]');
  const rtf = new Intl.RelativeTimeFormat('fr', { numeric: 'auto' });
  const units = [
    ['year', 31536000], ['month', 2592000], ['week', 604800],
    ['day', 86400], ['hour', 3600], ['minute', 60]
  ];
  function relago(t){
    const delta = Math.round((new Date(t).getTime() - Date.now())/1000);
    for(const [unit, sec] of units){
      const v = Math.round(delta/sec);
      if (Math.abs(v) >= 1) return rtf.format(v, unit);
    }
    return 'à l’instant';
  }
  function tick(){
    times.forEach(el=>{
      const dt = el.getAttribute('datetime');
      if (!dt) return;
      el.textContent = relago(dt);
    });
  }
  tick();
  setInterval(tick, 60_000);
})();
</script>
{% endblock %}
